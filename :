diff --git a/openstc_inter.py b/openstc_inter.py
index 1e2c402..0b1c2a8 100644
--- a/openstc_inter.py
+++ b/openstc_inter.py
@@ -388,3 +388,90 @@ class project(OpenbaseCore):
 
 
 project()
+
+
+class intervention_assignement(osv.osv):
+    _name = "openstc.intervention.assignement"
+    _description = ""
+
+    _actions = {
+        'create':lambda self,cr,uid,record, groups_code: 'MANA' in groups_code or 'DIRE' in groups_code,
+        'update':lambda self,cr,uid,record, groups_code: 'MANA' in groups_code or 'DIRE' in groups_code,
+        'delete':lambda self,cr,uid,record, groups_code: 'DIRE' in groups_code,
+
+        }
+    def _get_actions(self, cr, uid, ids, myFields ,arg, context=None):
+        #default value: empty string for each id
+        ret = {}.fromkeys(ids,'')
+        groups_code = []
+        groups_code = [group.code for group in self.pool.get("res.users").browse(cr, uid, uid, context=context).groups_id if group.code]
+
+        #evaluation of each _actions item, if test returns True, adds key to actions possible for this record
+        for record in self.browse(cr, uid, ids, context=context):
+            #ret.update({inter['id']:','.join([key for key,func in self._actions.items() if func(self,cr,uid,inter)])})
+            ret.update({record.id:[key for key,func in self._actions.items() if func(self,cr,uid,record,groups_code)]})
+        return ret
+
+
+    _columns = {
+            'name': fields.char('Affectation ', size=128, required=True),
+            'code': fields.char('Code affectation', size=32, required=True),
+            'asksAssigned': fields.one2many('openstc.ask', 'intervention_assignement_id', "asks"),
+            'actions':fields.function(_get_actions, method=True, string="Actions possibles",type="char", store=False),
+
+    }
+
+    _sql_constraints = [
+        ('code_uniq', 'unique (code)', '*code* / The code name must be unique !')
+    ]
+intervention_assignement()
+
+class project_work(osv.osv):
+    _name = "project.task.work"
+    _description = "Task work"
+    _inherit = "project.task.work"
+
+    _columns = {
+        'manager_id': fields.related('ask_id', 'manager_id', type='many2one', string='Services'),
+        'user_id': fields.many2one('res.users', 'Done by', required=False, select="1"),
+        'team_id': fields.many2one('openstc.team', 'Done by', required=False, select="1"),
+    }
+
+project_work()
+
+
+class project_task_type(osv.osv):
+    _name = "project.task.type"
+    _description = "project.task.type"
+    _inherit = "project.task.type"
+
+    _columns = {
+
+    }
+
+project_task_type()
+
+
+class project_task_history(osv.osv):
+    _name = 'project.task.history'
+    _description = 'History of Tasks'
+    _inherit = "project.task.history"
+
+    _columns = {
+        'state': fields.selection([('closed', 'Closed'),('absent', 'Absent'),('draft', 'New'),('open', 'In Progress'),('pending', 'Pending'), ('done', 'Done'), ('cancelled', 'Cancelled')], 'State'),
+
+    }
+
+project_task_history()
+
+class project_vs_hours(osv.osv):
+    _name = "project.vs.hours"
+    _description = " Project vs  hours"
+    _inherit = "project.vs.hours"
+
+    _columns = {
+
+    }
+
+project_vs_hours()
+
